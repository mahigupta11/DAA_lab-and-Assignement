#include<bits/stdc++.h>
using namespace std;
int mini(bool included[], int weights[], int V){
 int min = INT_MAX, min_index = 0;
 for(int i=0; i<V; i++){
 if(!included[i] && min > weights[i] ){
 min = weights[i];
 min_index = i;
 }
 }
 return min_index;
}
int prims(vector<vector<int>> Graph, int parent[], int weights[]){
 int V = Graph.size();
 bool included[V];
 for(int i=0; i<V; i++){
 included[i] = false;
 }
 weights[0] = 0;
 parent[0] = 0;
 // priority_queue<int, vector<int>, greater<int>> q;
 for(int i=0; i<V; i++){
 int u = mini(included, weights, V);
 included[u] = true;
 for(int j=0; j<V; j++){
 if(Graph[u][j] != 0 && !included[j] && weights[j] > Graph[u][j]){
 weights[j] = Graph[u][j];
 parent[j] = u;
 }
 }
 }
 return accumulate(weights, weights+V, 0);
}
int main(){
 int V;
 cin>>V;
 vector<vector<int>> Graph(V, vector<int> (V, 0));
 for(int i=0; i<V; i++){
 for(int j=0; j<V; j++){
 cin>>Graph[i][j];
 }
 }
 int parent[V] = {0};
 int weights[V];
 for(int i=0; i<V; i++){
 weights[i] = INT_MAX;
 }
 int mst_weight = prims(Graph, parent, weights);
 cout<<"Total weight of mst = "<<mst_weight<<endl;
 cout<<"MST : \n";
 for(int i=1; i<V; i++){
 cout<<parent[i]<<" -> "<<i<<" "<<weights[i]<<endl;
 }
 return 0;
}
