#include <iostream>
using namespace std;

int merge(int arr[], int start, int mid, int end)
{
	int n1 = mid - start + 1;
	int n2 = end - mid;

	int left[n1];
	int right[n2];

	for (int i = 0; i < n1; i++)
		left[i] = arr[start + i];
	for (int j = 0; j < n2; j++)
		right[j] = arr[mid + 1 + j];

	int i = 0, j = 0;

	int k = start;
	int count = 0;

	while (i < n1 && j < n2)
	{
		if (left[i] <= right[j])
		{
			arr[k] = left[i];
			i++;
		}
		else
		{
			arr[k] = right[j];
			j++;
			count += (mid - i + 1);
		}
		k++;
	}

	while (i < n1)
	{
		arr[k] = left[i];
		i++;
		k++;
	}

	while (j < n2)
	{
		arr[k] = right[j];
		j++;
		k++;
	}

	return count;
}
int mergeSort(int arr[], int start, int end)
{
	int count = 0;
	if (start < end)
	{
		int mid = (start + end) / 2;

		count += mergeSort(arr, start, mid);

		count += mergeSort(arr, mid + 1, end);

		count += merge(arr, start, mid, end);
	}
	return count;
}

void printArray(int arr[], int size)
{
	for (int i = 0; i < size; i++)
		cout << arr[i] << " ";
	cout << "\n";
}

int main()
{
	int T;
	cin >> T;

	while (T--)
	{
		int n;
		cin >> n;

		int arr[n];

		for (int i = 0; i < n; i++)
			cin >> arr[i];

		int count = mergeSort(arr, 0, n - 1);

		cout << count << "\n";

		printArray(arr, n);
	}
	return 0;
}
}
