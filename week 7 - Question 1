#include<bits/stdc++.h>
using namespace std;
int minDistance(int V, int dist[], bool inc[])
{
 int min = INT_MAX, min_index;
 for (int i = 0; i < V; i++){
 if (!inc[i] && dist[i] <= min){
 min = dist[i];
 min_index = i;
 }
 }
 return min_index;
}
void dijkstra(int V, vector<vector<int>>& graph, int src, int parent[], int dist[])
{
 bool inc[V]; 
 for (int i = 0; i < V; i++){
 inc[i] = false;
 }
 dist[src] = 0;
 for (int i = 0; i < V - 1; i++)
 {
 int u = minDistance(V, dist, inc);
 inc[u] = true;
 for (int v = 0; v < V; v++){
 if (!inc[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]){
 dist[v] = dist[u] + graph[u][v];
 parent[v] = u;
 }
 }
 }
}
int main()
{
 int V;
 cout << "Enter number of Vertices : ";
 cin >> V;
 vector<vector<int>> Graph(V, vector<int> (V));
 for (int i = 0; i < V; i++)
 {
 cout << "Enter neighbours of " << i+1 << " : " << endl;
 for(int j=0; j<V; j++)
 {
 cin >> Graph[i][j];
 }
 }
 int src;
 int parent[V], dist[V];
 for(int i=0; i<V; i++){
 parent[i] = i;
 dist[i] = INT_MAX;
 }
 cout<<"Enter source : ";
 cin>>src;
 src--;
 dijkstra(V, Graph, src, parent, dist);
 for(int i=0; i<V; i++){
 int j = i;
 stack<int> st;
 while(parent[j] != j){
 st.push(j);
 j = parent[j];
 }
 st.push(j);
 while(!st.empty()){
 cout<<st.top()+1<<" ";
 st.pop();
 }
 cout<<" : "<<dist[i]<<endl;
 }
 return 0;
}
